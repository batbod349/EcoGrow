{% extends 'base.html.twig' %}
{% import 'macro/ecopagnon.html.twig' as ecopagnon %}

{% block title %}EcoPagnon
{% endblock %}

{% block body %}
	<div
		class="page-container">
		<!-- Titre en haut de la page -->
		<div class="title-container mb-5">
			<h2 class="font-rawles text-3xl text-center">EcoPagnon</h2>
		</div>

		<!-- EcoPagnon centré verticalement -->
		<div class="ecopagnon-container flex flex-col">
			<div class="mb-10">
				{{ ecopagnon.displayEcopagnonImage(moodValue, 150, 150) }}
			</div>

			<!-- Conversation en bas de la page -->
			<div class="chat-container">
				<div class="message-container" id="messageContainer">
					{% for message in chatHistory %}
						<div class="message {{ message.user is defined ? 'user-message' : 'ia-message' }}">
							{{ message.user is defined ? message.user : message.ia }}
						</div>
					{% endfor %}
				</div>

				<div id="chatBot" class="text-center">
					<textarea class="input-textarea" id="userInput" placeholder="Tapez votre message ici..." rows="3" style="max-height: calc(1.5em * 10);"></textarea>
					<button class="button-clear" onclick="clearHistory()">Supprimer l'historique</button>
					<button class="button-send" onclick="sendMessage()">Envoyer</button>
				</div>
			</div>
		</div>
	</div>

	<script>
		// Scripts de gestion du chatbot (inchangés)
function sendMessage() {
const userInput = document.getElementById("userInput").value;
if (! userInput) 
return;


fetch("{{ path('app_chatbot') }}", {
method: "POST",
headers: {
"Content-Type": "application/json",
"X-Requested-With": "XMLHttpRequest"
},
body: JSON.stringify(
{prompt: userInput}
)
}).then(response => response.json()).then(data => {
document.getElementById("userInput").value = '';

const messageContainer = document.getElementById("messageContainer");
const userMessage = document.createElement("div");
userMessage.classList.add("message", "user-message");
userMessage.textContent = userInput;
messageContainer.appendChild(userMessage);

const iaMessage = document.createElement("div");
iaMessage.classList.add("message", "ia-message");
iaMessage.textContent = data.response;
messageContainer.appendChild(iaMessage);

messageContainer.scrollTop = messageContainer.scrollHeight;
}).catch(error => {
console.error("Erreur:", error);
});
}

function clearHistory() {
fetch("{{ path('app_clear_chat_history') }}", {
method: "POST",
headers: {
"X-Requested-With": "XMLHttpRequest"
}
}).then(response => {
if (response.ok) {
document.getElementById("messageContainer").innerHTML = '';
}
}).catch(error => {
console.error("Erreur:", error);
});
}
	</script>

	<style>
		/* Conteneur principal pour organiser les sections verticalement */
		.page-container {
			display: flex;
			flex-direction: column;
			justify-content: space-between;
			max-height: 80vh;
			padding: 1em;
		}

		/* Titre en haut */
		.title-container {
			text-align: center;
			margin-bottom: 1em;
		}

		/* Image EcoPagnon centrée verticalement */
		.ecopagnon-container {
			display: flex;
			justify-content: center;
			align-items: center;
			flex: 1;
		}

		/* Conversation en bas */
		.chat-container {
			padding-top: 1em;
		}

		/* Styles du conteneur de messages */
		.message-container {
			max-height: 250px;
			min-height: 250px;
			overflow-y: auto;
			padding: 10px;
			margin-bottom: 10px;
			border: 1px solid #ddd;
			border-radius: 10px;
			background: #f9f9f9;
		}

		/* Styles des messages */
		.message {
			margin: 5px 0;
		}
		.user-message {
			text-align: right;
			font-weight: bold;
			color: #333;
		}
		.ia-message {
			text-align: left;
			font-style: italic;
			color: #666;
		}

		/* Styles de l’input et des boutons */
		.input-textarea {
			width: 100%;
			padding: 10px;
			border: 2px solid #27AE60;
			border-radius: 10px;
			resize: none;
		}
		.button-clear,
		.button-send {
			margin: 5px;
			padding: 0.5em 1em;
			border-radius: 10px;
			cursor: pointer;
		}
		.button-clear {
			background: #e74c3c;
			color: white;
		}
		.button-send {
			background: #2ecc71;
			color: white;
		}
	</style>
{% endblock %}
